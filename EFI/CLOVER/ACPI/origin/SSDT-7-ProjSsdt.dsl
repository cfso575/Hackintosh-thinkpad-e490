/*
 * Intel ACPI Component Architecture
 * AML/ASL+ Disassembler version 20161210-64(RM)
 * Copyright (c) 2000 - 2016 Intel Corporation
 * 
 * Disassembling to non-symbolic legacy ASL operators
 *
 * Disassembly of SSDT-7-ProjSsdt.aml, Mon Jan 20 19:46:03 2020
 *
 * Original Table Header:
 *     Signature        "SSDT"
 *     Length           0x0000228E (8846)
 *     Revision         0x02
 *     Checksum         0x21
 *     OEM ID           "LENOVO"
 *     OEM Table ID     "ProjSsdt"
 *     OEM Revision     0x00000010 (16)
 *     Compiler ID      "INTL"
 *     Compiler Version 0x20161210 (538317328)
 */
DefinitionBlock ("", "SSDT", 2, "LENOVO", "ProjSsdt", 0x00000010)
{
    /*
     * External declarations were imported from
     * a reference file -- refs.txt
     */

    External (_GPE.MMTB, MethodObj)    // Imported: 0 Arguments
    External (_GPE.VHOV, MethodObj)    // Imported: 3 Arguments
    External (_SB_.GGIV, MethodObj)    // 1 Arguments (from opcode)
    External (_SB_.IETM, DeviceObj)    // (from opcode)
    External (_SB_.PCI0.GFX0.DD02._BCM, MethodObj)    // Imported: 1 Arguments
    External (_SB_.PCI0.LPCB.EC__, DeviceObj)    // (from opcode)
    External (_SB_.PCI0.LPCB.EC__.DOCD, UnknownObj)    // (from opcode)
    External (_SB_.PCI0.LPCB.EC__.HKEY, DeviceObj)    // (from opcode)
    External (_SB_.PCI0.LPCB.H_EC.ECMD, MethodObj)    // Imported: 1 Arguments
    External (_SB_.PCI0.LPCB.H_EC.ECRD, MethodObj)    // Imported: 1 Arguments
    External (_SB_.PCI0.LPCB.H_EC.ECWT, MethodObj)    // Imported: 2 Arguments
    External (_SB_.PCI0.PEG0.PEGP.SGPO, MethodObj)    // Imported: 2 Arguments
    External (_SB_.PCI0.SAT0, DeviceObj)    // (from opcode)
    External (_SB_.PCI0.SAT0.PRT0, DeviceObj)    // (from opcode)
    External (_SB_.PCI0.SAT0.PRT1, DeviceObj)    // (from opcode)
    External (_SB_.PCI0.SAT0.PRT2, DeviceObj)    // (from opcode)
    External (_SB_.PCI0.SAT0.PRT3, DeviceObj)    // (from opcode)
    External (_SB_.PCI0.SAT0.PRT4, DeviceObj)    // (from opcode)
    External (_SB_.PCI0.SAT0.PRT5, DeviceObj)    // (from opcode)
    External (_SB_.PCI0.SAT0.SDSM, MethodObj)    // Imported: 4 Arguments
    External (_SB_.PCI0.XHC_, DeviceObj)    // (from opcode)
    External (_SB_.PCI0.XHC_.MEMB, UnknownObj)    // (from opcode)
    External (_SB_.PCI0.XHC_.RHUB, DeviceObj)    // (from opcode)
    External (_SB_.PCI0.XHC_.RHUB.HS01, DeviceObj)    // (from opcode)
    External (_SB_.PCI0.XHC_.RHUB.HS02, DeviceObj)    // (from opcode)
    External (_SB_.PCI0.XHC_.RHUB.HS03, DeviceObj)    // (from opcode)
    External (_SB_.PCI0.XHC_.RHUB.HS04, DeviceObj)    // (from opcode)
    External (_SB_.PCI0.XHC_.RHUB.HS05, DeviceObj)    // (from opcode)
    External (_SB_.PCI0.XHC_.RHUB.HS06, DeviceObj)    // (from opcode)
    External (_SB_.PCI0.XHC_.RHUB.HS07, DeviceObj)    // (from opcode)
    External (_SB_.PCI0.XHC_.RHUB.HS08, DeviceObj)    // (from opcode)
    External (_SB_.PCI0.XHC_.RHUB.HS09, DeviceObj)    // (from opcode)
    External (_SB_.PCI0.XHC_.RHUB.HS10, DeviceObj)    // (from opcode)
    External (_SB_.PCI0.XHC_.RHUB.SS01, DeviceObj)    // (from opcode)
    External (_SB_.PCI0.XHC_.RHUB.SS02, DeviceObj)    // (from opcode)
    External (_SB_.PCI0.XHC_.RHUB.SS03, DeviceObj)    // (from opcode)
    External (_SB_.PCI0.XHC_.RHUB.SS04, DeviceObj)    // (from opcode)
    External (_SB_.PCI0.XHC_.RHUB.SS05, DeviceObj)    // (from opcode)
    External (_SB_.PCI0.XHC_.RHUB.SS06, DeviceObj)    // (from opcode)
    External (_SB_.PCI0.XHC_.RHUB.TPLD, MethodObj)    // Imported: 2 Arguments
    External (_SB_.SGOV, MethodObj)    // 2 Arguments (from opcode)
    External (ADBG, MethodObj)    // 1 Arguments (from opcode)
    External (DPP0, UnknownObj)    // (from opcode)
    External (DPP1, UnknownObj)    // (from opcode)
    External (DPP2, UnknownObj)    // (from opcode)
    External (DPP3, UnknownObj)    // (from opcode)
    External (DPP4, UnknownObj)    // (from opcode)
    External (DVS0, UnknownObj)    // (from opcode)
    External (DVS1, UnknownObj)    // (from opcode)
    External (DVS2, UnknownObj)    // (from opcode)
    External (DVS3, UnknownObj)    // (from opcode)
    External (MDBG, MethodObj)    // Imported: 1 Arguments
    External (MEMB, UnknownObj)    // (from opcode)
    External (PRT0, DeviceObj)    // (from opcode)
    External (PRT1, DeviceObj)    // (from opcode)
    External (PRT2, DeviceObj)    // (from opcode)
    External (PRT3, DeviceObj)    // (from opcode)
    External (PRT4, DeviceObj)    // (from opcode)
    External (WIN8, UnknownObj)    // (from opcode)

    Scope (\)
    {
        Name (UPC0, Package (0x04)
        {
            0xFF, 
            Zero, 
            Zero, 
            Zero
        })
        Name (PLD0, Buffer (0x10)
        {
            /* 0000 */  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0008 */  0x51, 0x11, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00 
        })
        Name (UPC1, Package (0x04)
        {
            0xFF, 
            0x09, 
            Zero, 
            Zero
        })
        Name (PLD1, Buffer (0x10)
        {
            /* 0000 */  0x81, 0x00, 0x00, 0x00, 0x08, 0x00, 0x03, 0x00,
            /* 0008 */  0x59, 0x12, 0x80, 0x00, 0x03, 0x00, 0x00, 0x00 
        })
        Name (UPC2, Package (0x04)
        {
            0xFF, 
            Zero, 
            Zero, 
            Zero
        })
        Name (PLD2, Buffer (0x10)
        {
            /* 0000 */  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0008 */  0x51, 0x11, 0x00, 0x01, 0x03, 0x00, 0x00, 0x00 
        })
        Name (UPC3, Package (0x04)
        {
            0xFF, 
            Zero, 
            Zero, 
            Zero
        })
        Name (PLD3, Buffer (0x10)
        {
            /* 0000 */  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0008 */  0x51, 0x11, 0x10, 0x01, 0x03, 0x00, 0x00, 0x00 
        })
        Name (UPCI, Package (0x04)
        {
            Zero, 
            0xFF, 
            Zero, 
            Zero
        })
        Name (PLDI, Buffer (0x10)
        {
            /* 0000 */  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0008 */  0x30, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        })
        Name (PLDC, Buffer (0x14)
        {
            /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0008 */  0x24, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0010 */  0xDD, 0x00, 0x95, 0x00                         
        })
    }

    Scope (\_SB.PCI0.XHC.RHUB.HS01)
    {
        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
        {
            Name (UPCP, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            CopyObject (\UPC0, UPCP)
            Return (UPCP)
        }

        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
        {
            Name (PLDP, Buffer (0x10) {})
            Store (\PLD0, PLDP)
            Return (PLDP)
        }
    }

    Scope (\_SB.PCI0.XHC.RHUB.HS02)
    {
        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
        {
            Name (UPCP, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            CopyObject (\UPC1, UPCP)
            Return (UPCP)
        }

        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
        {
            Name (PLDP, Buffer (0x10) {})
            Store (\PLD1, PLDP)
            Return (PLDP)
        }
    }

    Scope (\_SB.PCI0.XHC.RHUB.HS03)
    {
        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
        {
            Name (UPCP, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            CopyObject (\UPC2, UPCP)
            Return (UPCP)
        }

        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
        {
            Name (PLDP, Buffer (0x10) {})
            Store (\PLD2, PLDP)
            Return (PLDP)
        }
    }

    Scope (\_SB.PCI0.XHC.RHUB.HS04)
    {
        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
        {
            Name (UPCP, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            CopyObject (\UPC3, UPCP)
            Return (UPCP)
        }

        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
        {
            Name (PLDP, Buffer (0x10) {})
            Store (\PLD3, PLDP)
            Return (PLDP)
        }
    }

    Scope (\_SB.PCI0.XHC.RHUB.HS05)
    {
        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
        {
            Name (UPCP, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            CopyObject (\UPCI, UPCP)
            Return (UPCP)
        }

        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
        {
            Name (PLDP, Buffer (0x10) {})
            Store (\PLDI, PLDP)
            Return (PLDP)
        }
    }

    Scope (\_SB.PCI0.XHC.RHUB.HS06)
    {
        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
        {
            Name (UPCP, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            CopyObject (\UPCI, UPCP)
            Return (UPCP)
        }

        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
        {
            Name (PLDP, Buffer (0x10) {})
            Store (\PLDI, PLDP)
            Return (PLDP)
        }
    }

    Scope (\_SB.PCI0.XHC.RHUB.HS07)
    {
        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
        {
            Name (UPCP, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            CopyObject (\UPCI, UPCP)
            Return (UPCP)
        }

        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
        {
            Name (PLDP, Buffer (0x10) {})
            Store (\PLDI, PLDP)
            Return (PLDP)
        }
    }

    Scope (\_SB.PCI0.XHC.RHUB.HS08)
    {
        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
        {
            Name (UPCP, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            CopyObject (\UPCI, UPCP)
            Return (UPCP)
        }

        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
        {
            Name (PLDP, Buffer (0x10) {})
            Store (\PLDI, PLDP)
            Return (PLDP)
        }
    }

    Scope (\_SB.PCI0.XHC.RHUB.HS09)
    {
        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
        {
            Name (UPCP, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            CopyObject (\UPCI, UPCP)
            Return (UPCP)
        }

        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
        {
            Name (PLDP, Buffer (0x10) {})
            Store (\PLDI, PLDP)
            Return (PLDP)
        }
    }

    Scope (\_SB.PCI0.XHC.RHUB.HS10)
    {
        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
        {
            Name (UPCP, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            CopyObject (\UPCI, UPCP)
            Return (UPCP)
        }

        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
        {
            Name (PLDP, Buffer (0x10) {})
            Store (\PLDI, PLDP)
            Return (PLDP)
        }
    }

    Scope (\_SB.PCI0.XHC.RHUB.SS01)
    {
        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
        {
            Name (UPCP, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            CopyObject (\UPCI, UPCP)
            Return (UPCP)
        }

        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
        {
            Name (PLDP, Buffer (0x10) {})
            Store (\PLDI, PLDP)
            Return (PLDP)
        }
    }

    Scope (\_SB.PCI0.XHC.RHUB.SS02)
    {
        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
        {
            Name (UPCP, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            CopyObject (\UPC1, UPCP)
            Return (UPCP)
        }

        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
        {
            Name (PLDP, Buffer (0x10) {})
            Store (\PLD1, PLDP)
            Return (PLDP)
        }
    }

    Scope (\_SB.PCI0.XHC.RHUB.SS03)
    {
        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
        {
            Name (UPCP, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            CopyObject (\UPC0, UPCP)
            Return (UPCP)
        }

        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
        {
            Name (PLDP, Buffer (0x10) {})
            Store (\PLD0, PLDP)
            Return (PLDP)
        }
    }

    Scope (\_SB.PCI0.XHC.RHUB.SS04)
    {
        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
        {
            Name (UPCP, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            CopyObject (\UPC2, UPCP)
            Return (UPCP)
        }

        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
        {
            Name (PLDP, Buffer (0x10) {})
            Store (\PLD2, PLDP)
            Return (PLDP)
        }
    }

    Scope (\_SB.PCI0.XHC.RHUB.SS05)
    {
        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
        {
            Name (UPCP, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            CopyObject (\UPCI, UPCP)
            Return (UPCP)
        }

        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
        {
            Name (PLDP, Buffer (0x10) {})
            Store (\PLDI, PLDP)
            Return (PLDP)
        }
    }

    Scope (\_SB.PCI0.XHC.RHUB.SS06)
    {
        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
        {
            Name (UPCP, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            CopyObject (\UPCI, UPCP)
            Return (UPCP)
        }

        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
        {
            Name (PLDP, Buffer (0x10) {})
            Store (\PLDI, PLDP)
            Return (PLDP)
        }
    }

    Scope (\_SB.PCI0.XHC.RHUB.HS06)
    {
        Device (WCAM)
        {
            Name (_ADR, 0x06)  // _ADR: Address
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (\WIN8)
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
            {
                Return (\UPCI)
            }

            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
            {
                Return (\PLDC)
            }
        }
    }

    Scope (\_SB.PCI0.XHC)
    {
        Name (UPWR, Zero)
        Name (USPP, Zero)
    }

    Scope (\_SB.PCI0.XHC.RHUB)
    {
        Method (PS0X, 0, Serialized)
        {
            Store (Zero, \_SB.PCI0.XHC.USPP)
        }

        Method (PS2X, 0, Serialized)
        {
            OperationRegion (XHCM, SystemMemory, And (ToInteger (MEMB), 0xFFFFFFFFFFFF0000), 0x0600)
            Field (XHCM, DWordAcc, NoLock, Preserve)
            {
                Offset (0x02), 
                XHCV,   16, 
                Offset (0x480), 
                HP01,   1, 
                Offset (0x490), 
                HP02,   1, 
                Offset (0x530), 
                SP00,   1, 
                Offset (0x540), 
                SP01,   1
            }

            If (LEqual (XHCV, 0xFFFF))
            {
                Return (Zero)
            }

            If (LAnd (LEqual (HP01, Zero), LEqual (SP00, Zero)))
            {
                Or (\_SB.PCI0.XHC.USPP, 0x02, \_SB.PCI0.XHC.USPP)
            }

            If (LAnd (LEqual (HP02, Zero), LEqual (SP01, Zero)))
            {
                Or (\_SB.PCI0.XHC.USPP, 0x04, \_SB.PCI0.XHC.USPP)
            }
        }

        Method (PS3X, 0, Serialized)
        {
        }
    }

    Scope (\_SB.PCI0.SAT0)
    {
        Scope (PRT0)
        {
            Name (DIP0, Zero)
            Name (FDEV, Zero)
            Name (FDRP, Zero)
            Name (HDTF, Buffer (0x0E)
            {
                /* 0000 */  0x02, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF, 0x00,
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xA0, 0xF5             
            })
            Name (HETF, Buffer (0x15)
            {
                /* 0000 */  0x02, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF, 0x00,
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xA0, 0xF5, 0x10, 0x09,
                /* 0010 */  0x00, 0x00, 0x00, 0xA0, 0xEF                   
            })
            Name (ERTF, Buffer (0x15)
            {
                /* 0000 */  0x02, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF, 0x00,
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xA0, 0xF5, 0x5F, 0x00,
                /* 0010 */  0x00, 0x00, 0x00, 0xA0, 0xEF                   
            })
            Name (HPTF, Buffer (0x15)
            {
                /* 0000 */  0x02, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF, 0x00,
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xA0, 0xF5, 0x10, 0x03,
                /* 0010 */  0x00, 0x00, 0x00, 0xA0, 0xEF                   
            })
            Name (HQTF, Buffer (0x1C)
            {
                /* 0000 */  0x02, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF, 0x00,
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xA0, 0xF5, 0x10, 0x03,
                /* 0010 */  0x00, 0x00, 0x00, 0xA0, 0xEF, 0x10, 0x09, 0x00,
                /* 0018 */  0x00, 0x00, 0xA0, 0xEF                         
            })
            Name (HXTF, Buffer (0x1C)
            {
                /* 0000 */  0x02, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF, 0x00,
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xA0, 0xF5, 0x5F, 0x00,
                /* 0010 */  0x00, 0x00, 0x00, 0xA0, 0xEF, 0x10, 0x03, 0x00,
                /* 0018 */  0x00, 0x00, 0xA0, 0xEF                         
            })
            Name (DDTF, Buffer (0x0E)
            {
                /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xE3, 0x00,
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xA0, 0xE3             
            })
            CreateByteField (DDTF, One, DTAT)
            CreateByteField (DDTF, 0x08, DTFT)
            Name (DGTF, Buffer (0x15)
            {
                /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xE3, 0x00,
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xA0, 0xE3, 0x10, 0x03,
                /* 0010 */  0x00, 0x00, 0x00, 0xA0, 0xEF                   
            })
            CreateByteField (DGTF, One, GTAT)
            CreateByteField (DGTF, 0x08, GTFT)
            Method (XSDD, 1, NotSerialized)
            {
                ADBG ("PRT0: XSDD")
                Store (Zero, DIP0)
                If (LEqual (SizeOf (Arg0), 0x0200))
                {
                    CreateWordField (Arg0, 0x9C, M078)
                    If (LAnd (\DPP0, And (M078, 0x08)))
                    {
                        Store (One, DIP0)
                    }

                    CreateByteField (Arg0, 0x9D, BFDS)
                    ToInteger (BFDS, FDEV)
                    CreateByteField (Arg0, 0x9A, BFRP)
                    ToInteger (BFRP, FDRP)
                }
            }

            Method (XGTF, 0, NotSerialized)
            {
                ADBG ("PRT0: XGTF")
                If (DIP0)
                {
                    If (LAnd (LAnd (LEqual (DVS0, One), LEqual (And (FDEV, One), One)), LEqual (And (FDRP, 0x80), 0x80)))
                    {
                        Return (HQTF)
                    }
                    Else
                    {
                        Return (HPTF)
                    }
                }
                ElseIf (LAnd (LAnd (LEqual (DVS0, One), LEqual (And (FDEV, One), One)), LEqual (And (FDRP, 0x80), 0x80)))
                {
                    Return (HETF)
                }
                Else
                {
                    Return (HDTF)
                }
            }
        }

        Scope (PRT1)
        {
            Name (DIP0, Zero)
            Name (FDEV, Zero)
            Name (FDRP, Zero)
            Name (HDTF, Buffer (0x0E)
            {
                /* 0000 */  0x02, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF, 0x00,
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xA0, 0xF5             
            })
            Name (HETF, Buffer (0x15)
            {
                /* 0000 */  0x02, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF, 0x00,
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xA0, 0xF5, 0x10, 0x09,
                /* 0010 */  0x00, 0x00, 0x00, 0xA0, 0xEF                   
            })
            Name (ERTF, Buffer (0x15)
            {
                /* 0000 */  0x02, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF, 0x00,
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xA0, 0xF5, 0x5F, 0x00,
                /* 0010 */  0x00, 0x00, 0x00, 0xA0, 0xEF                   
            })
            Name (HPTF, Buffer (0x15)
            {
                /* 0000 */  0x02, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF, 0x00,
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xA0, 0xF5, 0x10, 0x03,
                /* 0010 */  0x00, 0x00, 0x00, 0xA0, 0xEF                   
            })
            Name (HQTF, Buffer (0x1C)
            {
                /* 0000 */  0x02, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF, 0x00,
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xA0, 0xF5, 0x10, 0x03,
                /* 0010 */  0x00, 0x00, 0x00, 0xA0, 0xEF, 0x10, 0x09, 0x00,
                /* 0018 */  0x00, 0x00, 0xA0, 0xEF                         
            })
            Name (HXTF, Buffer (0x1C)
            {
                /* 0000 */  0x02, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF, 0x00,
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xA0, 0xF5, 0x5F, 0x00,
                /* 0010 */  0x00, 0x00, 0x00, 0xA0, 0xEF, 0x10, 0x03, 0x00,
                /* 0018 */  0x00, 0x00, 0xA0, 0xEF                         
            })
            Name (DDTF, Buffer (0x0E)
            {
                /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xE3, 0x00,
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xA0, 0xE3             
            })
            CreateByteField (DDTF, One, DTAT)
            CreateByteField (DDTF, 0x08, DTFT)
            Name (DGTF, Buffer (0x15)
            {
                /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xE3, 0x00,
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xA0, 0xE3, 0x10, 0x03,
                /* 0010 */  0x00, 0x00, 0x00, 0xA0, 0xEF                   
            })
            CreateByteField (DGTF, One, GTAT)
            CreateByteField (DGTF, 0x08, GTFT)
            Method (XSDD, 1, NotSerialized)
            {
                ADBG ("PRT1: XSDD")
                Store (Zero, DIP0)
                If (LEqual (SizeOf (Arg0), 0x0200))
                {
                    CreateWordField (Arg0, 0x9C, M078)
                    If (LAnd (\DPP1, And (M078, 0x08)))
                    {
                        Store (One, DIP0)
                    }

                    CreateByteField (Arg0, 0x9D, BFDS)
                    ToInteger (BFDS, FDEV)
                    CreateByteField (Arg0, 0x9A, BFRP)
                    ToInteger (BFRP, FDRP)
                }
            }

            Method (XGTF, 0, NotSerialized)
            {
                ADBG ("PRT1: XGTF")
                If (DIP0)
                {
                    If (LAnd (LAnd (LEqual (DVS1, One), LEqual (And (FDEV, One), One)), LEqual (And (FDRP, 0x80), 0x80)))
                    {
                        Return (HQTF)
                    }
                    Else
                    {
                        Return (HPTF)
                    }
                }
                ElseIf (LAnd (LAnd (LEqual (DVS1, One), LEqual (And (FDEV, One), One)), LEqual (And (FDRP, 0x80), 0x80)))
                {
                    Return (HETF)
                }
                Else
                {
                    Return (HDTF)
                }
            }
        }

        Scope (PRT2)
        {
            Name (DIP0, Zero)
            Name (FDEV, Zero)
            Name (FDRP, Zero)
            Name (HDTF, Buffer (0x0E)
            {
                /* 0000 */  0x02, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF, 0x00,
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xA0, 0xF5             
            })
            Name (HETF, Buffer (0x15)
            {
                /* 0000 */  0x02, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF, 0x00,
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xA0, 0xF5, 0x10, 0x09,
                /* 0010 */  0x00, 0x00, 0x00, 0xA0, 0xEF                   
            })
            Name (ERTF, Buffer (0x15)
            {
                /* 0000 */  0x02, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF, 0x00,
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xA0, 0xF5, 0x5F, 0x00,
                /* 0010 */  0x00, 0x00, 0x00, 0xA0, 0xEF                   
            })
            Name (HPTF, Buffer (0x15)
            {
                /* 0000 */  0x02, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF, 0x00,
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xA0, 0xF5, 0x10, 0x03,
                /* 0010 */  0x00, 0x00, 0x00, 0xA0, 0xEF                   
            })
            Name (HQTF, Buffer (0x1C)
            {
                /* 0000 */  0x02, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF, 0x00,
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xA0, 0xF5, 0x10, 0x03,
                /* 0010 */  0x00, 0x00, 0x00, 0xA0, 0xEF, 0x10, 0x09, 0x00,
                /* 0018 */  0x00, 0x00, 0xA0, 0xEF                         
            })
            Name (HXTF, Buffer (0x1C)
            {
                /* 0000 */  0x02, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF, 0x00,
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xA0, 0xF5, 0x5F, 0x00,
                /* 0010 */  0x00, 0x00, 0x00, 0xA0, 0xEF, 0x10, 0x03, 0x00,
                /* 0018 */  0x00, 0x00, 0xA0, 0xEF                         
            })
            Name (DDTF, Buffer (0x0E)
            {
                /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xE3, 0x00,
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xA0, 0xE3             
            })
            CreateByteField (DDTF, One, DTAT)
            CreateByteField (DDTF, 0x08, DTFT)
            Name (DGTF, Buffer (0x15)
            {
                /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xE3, 0x00,
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xA0, 0xE3, 0x10, 0x03,
                /* 0010 */  0x00, 0x00, 0x00, 0xA0, 0xEF                   
            })
            CreateByteField (DGTF, One, GTAT)
            CreateByteField (DGTF, 0x08, GTFT)
            Method (XSDD, 1, NotSerialized)
            {
                ADBG ("PRT2: XSDD")
                Store (Zero, DIP0)
                If (LEqual (SizeOf (Arg0), 0x0200))
                {
                    CreateWordField (Arg0, 0x9C, M078)
                    If (LAnd (\DPP2, And (M078, 0x08)))
                    {
                        Store (One, DIP0)
                    }

                    CreateByteField (Arg0, 0x9D, BFDS)
                    ToInteger (BFDS, FDEV)
                    CreateByteField (Arg0, 0x9A, BFRP)
                    ToInteger (BFRP, FDRP)
                }
            }

            Method (XGTF, 0, NotSerialized)
            {
                ADBG ("PRT2: XGTF")
                If (DIP0)
                {
                    If (LAnd (LAnd (LEqual (DVS2, One), LEqual (And (FDEV, One), One)), LEqual (And (FDRP, 0x80), 0x80)))
                    {
                        Return (HQTF)
                    }
                    Else
                    {
                        Return (HPTF)
                    }
                }
                ElseIf (LAnd (LAnd (LEqual (DVS2, One), LEqual (And (FDEV, One), One)), LEqual (And (FDRP, 0x80), 0x80)))
                {
                    Return (HETF)
                }
                Else
                {
                    Return (HDTF)
                }
            }
        }

        Scope (PRT3)
        {
            Name (DIP0, Zero)
            Name (FDEV, Zero)
            Name (FDRP, Zero)
            Name (HDTF, Buffer (0x0E)
            {
                /* 0000 */  0x02, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF, 0x00,
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xA0, 0xF5             
            })
            Name (HETF, Buffer (0x15)
            {
                /* 0000 */  0x02, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF, 0x00,
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xA0, 0xF5, 0x10, 0x09,
                /* 0010 */  0x00, 0x00, 0x00, 0xA0, 0xEF                   
            })
            Name (ERTF, Buffer (0x15)
            {
                /* 0000 */  0x02, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF, 0x00,
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xA0, 0xF5, 0x5F, 0x00,
                /* 0010 */  0x00, 0x00, 0x00, 0xA0, 0xEF                   
            })
            Name (HPTF, Buffer (0x15)
            {
                /* 0000 */  0x02, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF, 0x00,
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xA0, 0xF5, 0x10, 0x03,
                /* 0010 */  0x00, 0x00, 0x00, 0xA0, 0xEF                   
            })
            Name (HQTF, Buffer (0x1C)
            {
                /* 0000 */  0x02, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF, 0x00,
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xA0, 0xF5, 0x10, 0x03,
                /* 0010 */  0x00, 0x00, 0x00, 0xA0, 0xEF, 0x10, 0x09, 0x00,
                /* 0018 */  0x00, 0x00, 0xA0, 0xEF                         
            })
            Name (HXTF, Buffer (0x1C)
            {
                /* 0000 */  0x02, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF, 0x00,
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xA0, 0xF5, 0x5F, 0x00,
                /* 0010 */  0x00, 0x00, 0x00, 0xA0, 0xEF, 0x10, 0x03, 0x00,
                /* 0018 */  0x00, 0x00, 0xA0, 0xEF                         
            })
            Name (DDTF, Buffer (0x0E)
            {
                /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xE3, 0x00,
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xA0, 0xE3             
            })
            CreateByteField (DDTF, One, DTAT)
            CreateByteField (DDTF, 0x08, DTFT)
            Name (DGTF, Buffer (0x15)
            {
                /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xE3, 0x00,
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xA0, 0xE3, 0x10, 0x03,
                /* 0010 */  0x00, 0x00, 0x00, 0xA0, 0xEF                   
            })
            CreateByteField (DGTF, One, GTAT)
            CreateByteField (DGTF, 0x08, GTFT)
            Method (XSDD, 1, NotSerialized)
            {
                ADBG ("PRT3: XSDD")
                Store (Zero, DIP0)
                If (LEqual (SizeOf (Arg0), 0x0200))
                {
                    CreateWordField (Arg0, 0x9C, M078)
                    If (LAnd (\DPP3, And (M078, 0x08)))
                    {
                        Store (One, DIP0)
                    }

                    CreateByteField (Arg0, 0x9D, BFDS)
                    ToInteger (BFDS, FDEV)
                    CreateByteField (Arg0, 0x9A, BFRP)
                    ToInteger (BFRP, FDRP)
                }
            }

            Method (XGTF, 0, NotSerialized)
            {
                ADBG ("PRT3: XGTF")
                If (DIP0)
                {
                    If (LAnd (LAnd (LEqual (DVS3, One), LEqual (And (FDEV, One), One)), LEqual (And (FDRP, 0x80), 0x80)))
                    {
                        Return (HQTF)
                    }
                    Else
                    {
                        Return (HPTF)
                    }
                }
                ElseIf (LAnd (LAnd (LEqual (DVS3, One), LEqual (And (FDEV, One), One)), LEqual (And (FDRP, 0x80), 0x80)))
                {
                    Return (HETF)
                }
                Else
                {
                    Return (HDTF)
                }
            }
        }

        Scope (PRT4)
        {
            Name (DIP0, Zero)
            Name (HDTF, Buffer (0x0E)
            {
                /* 0000 */  0x02, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF, 0x00,
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xA0, 0xF5             
            })
            Name (HETF, Buffer (0x15)
            {
                /* 0000 */  0x02, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF, 0x00,
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xA0, 0xF5, 0x10, 0x09,
                /* 0010 */  0x00, 0x00, 0x00, 0xA0, 0xEF                   
            })
            Name (ERTF, Buffer (0x15)
            {
                /* 0000 */  0x02, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF, 0x00,
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xA0, 0xF5, 0x5F, 0x00,
                /* 0010 */  0x00, 0x00, 0x00, 0xA0, 0xEF                   
            })
            Name (HPTF, Buffer (0x15)
            {
                /* 0000 */  0x02, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF, 0x00,
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xA0, 0xF5, 0x10, 0x03,
                /* 0010 */  0x00, 0x00, 0x00, 0xA0, 0xEF                   
            })
            Name (HQTF, Buffer (0x1C)
            {
                /* 0000 */  0x02, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF, 0x00,
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xA0, 0xF5, 0x10, 0x03,
                /* 0010 */  0x00, 0x00, 0x00, 0xA0, 0xEF, 0x10, 0x09, 0x00,
                /* 0018 */  0x00, 0x00, 0xA0, 0xEF                         
            })
            Name (HXTF, Buffer (0x1C)
            {
                /* 0000 */  0x02, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF, 0x00,
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xA0, 0xF5, 0x5F, 0x00,
                /* 0010 */  0x00, 0x00, 0x00, 0xA0, 0xEF, 0x10, 0x03, 0x00,
                /* 0018 */  0x00, 0x00, 0xA0, 0xEF                         
            })
            Name (DDTF, Buffer (0x0E)
            {
                /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xE3, 0x00,
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xA0, 0xE3             
            })
            CreateByteField (DDTF, One, DTAT)
            CreateByteField (DDTF, 0x08, DTFT)
            Name (DGTF, Buffer (0x15)
            {
                /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xE3, 0x00,
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xA0, 0xE3, 0x10, 0x03,
                /* 0010 */  0x00, 0x00, 0x00, 0xA0, 0xEF                   
            })
            CreateByteField (DGTF, One, GTAT)
            CreateByteField (DGTF, 0x08, GTFT)
            Method (XSDD, 1, NotSerialized)
            {
                ADBG ("PRT4: XSDD")
                Store (Zero, DIP0)
                If (LEqual (SizeOf (Arg0), 0x0200))
                {
                    CreateWordField (Arg0, 0x9C, M078)
                    If (LAnd (\DPP4, And (M078, 0x08)))
                    {
                        Store (One, DIP0)
                    }
                }
            }

            Method (XGTF, 0, NotSerialized)
            {
                ADBG ("PRT4: XGTF")
                If (DIP0)
                {
                    Return (HPTF)
                }

                Return (HDTF)
            }
        }
    }

    Scope (\_SB.PCI0.SAT0)
    {
        Scope (PRT0)
        {
            Name (PORT, Zero)
            Name (PBAR, 0x0118)
            Name (PWRG, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
        }

        Scope (PRT1)
        {
            Name (PORT, One)
            Name (PBAR, 0x0198)
            Name (PWRG, Package (0x04)
            {
                0x02, 
                Zero, 
                Zero, 
                Zero
            })
        }

        Scope (PRT2)
        {
            Name (PORT, 0x02)
            Name (PBAR, 0x0218)
            Name (PWRG, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                One
            })
        }
    }

    Scope (\_SB.PCI0.LPCB.EC)
    {
        OperationRegion (ECMM, SystemMemory, 0xFF000000, 0x1000)
        Field (ECMM, AnyAcc, Lock, Preserve)
        {
            Offset (0x29C), 
            KPPP,   1, 
            Offset (0x29D), 
            Offset (0x2E6), 
            PCVL,   8, 
            Offset (0x2E8), 
            Offset (0x302), 
                ,   4, 
            ADSL,   1, 
            Offset (0x303), 
            Offset (0x3D0), 
            TMP1,   8, 
            TMP2,   8, 
            Offset (0x3D9), 
            S3ST,   1, 
            S3RM,   1, 
            S4ST,   1, 
            S4RM,   1, 
            S5ST,   1, 
            S5RM,   1, 
            Offset (0x3DA), 
            Offset (0x3DC), 
            NPST,   8, 
            TMP3,   8, 
            Offset (0x3E4), 
            CPUJ,   3, 
            CPNM,   3, 
            GATY,   2, 
            Offset (0x4DF), 
            PSID,   3, 
                ,   1, 
            SKID,   2, 
            PLSE,   2
        }
    }

    Scope (\_SB.PCI0.LPCB.EC)
    {
        Name (BTBF, Buffer (0x0100)
        {
             0x00                                           
        })
        OperationRegion (MMEC, SystemMemory, 0xFF000E00, 0x0100)
        Field (MMEC, AnyAcc, Lock, Preserve)
        {
            TWBT,   2048
        }

        Method (BTIF, 0, NotSerialized)
        {
            Store (TWBT, BTBF)
            Return (BTBF)
        }
    }

    Scope (\_SB.PCI0.LPCB.EC.HKEY)
    {
        Method (SBIG, 1, NotSerialized)
        {
            Return (\_SB.PCI0.LPCB.EC.BTIF ())
        }
    }

    Scope (\_SB.PCI0.LPCB.EC)
    {
        Method (SLED, 1, NotSerialized)
        {
            If (LEqual (Arg0, One))
            {
                \_SB.SGOV (0x0402000D, Zero)
            }
            Else
            {
                \_SB.SGOV (0x0402000D, One)
            }
        }

        Method (SLEG, 2, Serialized)
        {
            Name (_T_0, Zero)  // _T_x: Emitted by ASL Compiler
            While (One)
            {
                Store (ToInteger (Arg0), _T_0)
                If (LEqual (_T_0, 0x0E))
                {
                    If (LEqual (Arg1, 0x80))
                    {
                        \_SB.SGOV (0x0402000E, Zero)
                    }
                    ElseIf (LEqual (Arg1, Zero))
                    {
                        \_SB.SGOV (0x0402000E, One)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }

                Break
            }
        }
    }

    Scope (\_SB.IETM)
    {
        Name (DBD1, Package (0x01)
        {
            Buffer (0x036F)
            {
                /* 0000 */  0xE5, 0x1F, 0x94, 0x00, 0x00, 0x00, 0x00, 0x02,
                /* 0008 */  0x00, 0x00, 0x00, 0x40, 0x67, 0x64, 0x64, 0x76,
                /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                /* 0020 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                /* 0028 */  0x00, 0x00, 0x00, 0x00, 0x4F, 0x45, 0x4D, 0x20,
                /* 0030 */  0x45, 0x6D, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64,
                /* 0038 */  0x20, 0x44, 0x61, 0x74, 0x61, 0x56, 0x61, 0x75,
                /* 0040 */  0x6C, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                /* 0048 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                /* 0050 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                /* 0058 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                /* 0060 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                /* 0068 */  0x00, 0x00, 0x00, 0x00, 0xA6, 0x47, 0x93, 0x1F,
                /* 0070 */  0x94, 0x4A, 0xAD, 0x20, 0x9A, 0xA2, 0x75, 0x8A,
                /* 0078 */  0x27, 0x27, 0xCF, 0xEA, 0x0B, 0xD9, 0x59, 0x5D,
                /* 0080 */  0xF8, 0xEF, 0x55, 0xE8, 0xDB, 0x2A, 0xBF, 0x06,
                /* 0088 */  0xD4, 0x49, 0xCB, 0xAD, 0xDB, 0x02, 0x00, 0x00,
                /* 0090 */  0x52, 0x45, 0x50, 0x4F, 0x5D, 0x00, 0x00, 0x00,
                /* 0098 */  0x01, 0x51, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00,
                /* 00A0 */  0x00, 0x00, 0x72, 0x87, 0xCD, 0xFF, 0x6D, 0x24,
                /* 00A8 */  0x47, 0xDB, 0x3D, 0x24, 0x92, 0xB4, 0x16, 0x6F,
                /* 00B0 */  0x45, 0xD8, 0xC3, 0xF5, 0x66, 0x14, 0x9F, 0x22,
                /* 00B8 */  0xD7, 0xF7, 0xDE, 0x67, 0x90, 0x9A, 0xA2, 0x0D,
                /* 00C0 */  0x39, 0x25, 0xAD, 0xC3, 0x1A, 0xAD, 0x52, 0x0B,
                /* 00C8 */  0x75, 0x38, 0xE1, 0xA4, 0x14, 0x41, 0xD4, 0xEF,
                /* 00D0 */  0x72, 0x65, 0x47, 0xB3, 0x6E, 0xDE, 0xCF, 0xBD,
                /* 00D8 */  0xA8, 0x4C, 0x1A, 0xE8, 0xE9, 0x8B, 0xC7, 0xF2,
                /* 00E0 */  0xE7, 0xE5, 0x6B, 0x3A, 0x1C, 0x5D, 0x60, 0x19,
                /* 00E8 */  0x17, 0x87, 0x74, 0x36, 0x4B, 0xFD, 0x3C, 0x16,
                /* 00F0 */  0x5B, 0xDD, 0x77, 0x93, 0x37, 0x0D, 0xFF, 0x3F,
                /* 00F8 */  0x70, 0xE6, 0x20, 0xCC, 0x82, 0x64, 0xB8, 0xE5,
                /* 0100 */  0x8C, 0xB8, 0xB8, 0xD7, 0x2E, 0xAA, 0x7F, 0x48,
                /* 0108 */  0xC7, 0x13, 0x50, 0xAF, 0x5C, 0x98, 0xAF, 0xB6,
                /* 0110 */  0x99, 0x05, 0xA1, 0x2E, 0x43, 0xD5, 0x62, 0x0B,
                /* 0118 */  0x10, 0xAE, 0xED, 0x0F, 0x55, 0x77, 0x80, 0xFC,
                /* 0120 */  0x69, 0x0D, 0xE5, 0x7C, 0x3D, 0x93, 0x99, 0x1C,
                /* 0128 */  0x6E, 0x7E, 0x8A, 0x54, 0x6D, 0x00, 0xAD, 0x5E,
                /* 0130 */  0x60, 0x6E, 0xD0, 0xCC, 0xA3, 0x2A, 0xD3, 0xB8,
                /* 0138 */  0xC5, 0xD9, 0x56, 0x6F, 0x47, 0xCF, 0x9E, 0xA5,
                /* 0140 */  0xF8, 0x49, 0x5F, 0x97, 0x5D, 0xCA, 0xD6, 0xBE,
                /* 0148 */  0xE5, 0xF2, 0x42, 0x5C, 0x4C, 0x55, 0x57, 0x7B,
                /* 0150 */  0xEF, 0x6C, 0x93, 0xFE, 0xC2, 0x63, 0x71, 0xC9,
                /* 0158 */  0xC1, 0x10, 0x87, 0x67, 0xA2, 0x41, 0xD8, 0x15,
                /* 0160 */  0xA0, 0x60, 0x16, 0xCD, 0xF6, 0xF2, 0xE1, 0x87,
                /* 0168 */  0xFE, 0xB5, 0xD3, 0x33, 0xC1, 0x53, 0x3B, 0x6E,
                /* 0170 */  0xBC, 0x3C, 0xAF, 0x9F, 0x5F, 0x05, 0x0F, 0xF3,
                /* 0178 */  0x96, 0x81, 0x3F, 0xEF, 0xA4, 0x86, 0xBF, 0x0C,
                /* 0180 */  0x25, 0xAC, 0x39, 0xC5, 0x19, 0x23, 0xDB, 0x57,
                /* 0188 */  0x0C, 0xDA, 0x57, 0xE5, 0x1D, 0x8A, 0xA4, 0xEA,
                /* 0190 */  0xAA, 0x83, 0x15, 0x2B, 0xA2, 0x8E, 0xC1, 0x82,
                /* 0198 */  0xBE, 0x9A, 0xAE, 0xF2, 0x5F, 0x68, 0x79, 0xE8,
                /* 01A0 */  0xEC, 0xC7, 0x8F, 0x3F, 0x88, 0x7D, 0x65, 0x64,
                /* 01A8 */  0x17, 0x42, 0xAA, 0xDE, 0x2A, 0xF6, 0x13, 0x48,
                /* 01B0 */  0xD0, 0x9C, 0x61, 0x13, 0x5F, 0x90, 0x87, 0x48,
                /* 01B8 */  0xBD, 0xEC, 0x29, 0xB3, 0xF7, 0x54, 0x0A, 0xE6,
                /* 01C0 */  0x49, 0xBF, 0x5E, 0x0D, 0x7B, 0x14, 0x17, 0xBA,
                /* 01C8 */  0xED, 0x73, 0xE2, 0x38, 0x73, 0x6C, 0x3B, 0xF9,
                /* 01D0 */  0x6E, 0x1A, 0x3F, 0x5E, 0xC5, 0x39, 0x3A, 0x8E,
                /* 01D8 */  0x93, 0x6C, 0x6F, 0x03, 0x9E, 0xD0, 0x02, 0x68,
                /* 01E0 */  0x66, 0x71, 0x7B, 0x64, 0xFF, 0xC3, 0x4A, 0xF5,
                /* 01E8 */  0xE7, 0xD3, 0xC5, 0x3F, 0x2D, 0x8F, 0xAD, 0x5A,
                /* 01F0 */  0xCF, 0xD8, 0x76, 0xFF, 0xEB, 0x63, 0xE9, 0xE8,
                /* 01F8 */  0x9B, 0xBD, 0x81, 0x68, 0x5A, 0x07, 0x96, 0xE9,
                /* 0200 */  0xBA, 0x22, 0x34, 0xA1, 0x2F, 0xF6, 0x99, 0x4C,
                /* 0208 */  0x54, 0xD3, 0xE8, 0x80, 0xD9, 0x95, 0xE6, 0xCB,
                /* 0210 */  0x29, 0x63, 0xF3, 0x95, 0x39, 0xF5, 0x3A, 0x96,
                /* 0218 */  0xCF, 0xB3, 0x6D, 0xAF, 0x09, 0xD0, 0x49, 0x67,
                /* 0220 */  0x9E, 0x9E, 0xF7, 0xCE, 0xB8, 0x85, 0xA1, 0xFE,
                /* 0228 */  0xFD, 0xDE, 0xEE, 0xB5, 0x4E, 0x0B, 0x55, 0x60,
                /* 0230 */  0x9E, 0xF5, 0x8A, 0x93, 0x39, 0xAB, 0x41, 0x0F,
                /* 0238 */  0x55, 0xCC, 0x49, 0xF7, 0x43, 0x5F, 0x42, 0xB9,
                /* 0240 */  0x5C, 0x2F, 0xB4, 0x3D, 0xEB, 0x00, 0x20, 0x89,
                /* 0248 */  0x46, 0x60, 0x67, 0xBF, 0x2F, 0xDA, 0x42, 0xC5,
                /* 0250 */  0x14, 0xE2, 0xC7, 0xAC, 0xF9, 0xC5, 0xC4, 0xDF,
                /* 0258 */  0x9D, 0x0F, 0x61, 0xFB, 0xBF, 0x46, 0x67, 0xBD,
                /* 0260 */  0xC4, 0xB3, 0x99, 0x99, 0x3A, 0x24, 0xDA, 0xA1,
                /* 0268 */  0x0E, 0xD6, 0xCD, 0x1D, 0x55, 0xE6, 0x42, 0x39,
                /* 0270 */  0x3E, 0xB6, 0xB9, 0x8F, 0xE2, 0x4A, 0x31, 0xEB,
                /* 0278 */  0x24, 0xA1, 0xF1, 0x02, 0x18, 0x55, 0xD2, 0x05,
                /* 0280 */  0xBB, 0x96, 0xDB, 0x8A, 0x40, 0x74, 0xFF, 0xF1,
                /* 0288 */  0xAB, 0x19, 0xED, 0xA1, 0x6A, 0xC9, 0x8E, 0xF8,
                /* 0290 */  0xE2, 0x88, 0x61, 0x83, 0x11, 0xF0, 0xCE, 0x21,
                /* 0298 */  0x10, 0xB9, 0x4C, 0x97, 0x4E, 0x34, 0xD9, 0xA8,
                /* 02A0 */  0x30, 0x00, 0xB8, 0xCC, 0x66, 0x4A, 0x43, 0x57,
                /* 02A8 */  0x5E, 0xB5, 0xE0, 0x5C, 0x76, 0x1A, 0x84, 0xE5,
                /* 02B0 */  0xBF, 0x45, 0xA3, 0x0C, 0xE2, 0x38, 0x2B, 0x35,
                /* 02B8 */  0x58, 0x85, 0xB0, 0xD4, 0xF6, 0xED, 0xD9, 0x0E,
                /* 02C0 */  0x09, 0x6C, 0x47, 0xA4, 0x1B, 0x17, 0x17, 0x64,
                /* 02C8 */  0x5F, 0xB4, 0x54, 0xF7, 0x5F, 0xD1, 0x5B, 0xDF,
                /* 02D0 */  0x3A, 0x1C, 0xE1, 0x8F, 0xD2, 0x3E, 0xD4, 0x48,
                /* 02D8 */  0xA0, 0xCA, 0x9E, 0xFC, 0x04, 0xE4, 0x31, 0x9D,
                /* 02E0 */  0xBD, 0x0D, 0x12, 0x17, 0xE2, 0x81, 0x40, 0x3F,
                /* 02E8 */  0x51, 0x01, 0x03, 0x64, 0x47, 0xA4, 0x56, 0x2B,
                /* 02F0 */  0x84, 0xB6, 0xC3, 0x37, 0x2A, 0xF5, 0x74, 0x53,
                /* 02F8 */  0x78, 0x88, 0xEA, 0xF3, 0x70, 0xC8, 0x68, 0xCA,
                /* 0300 */  0x09, 0x66, 0x07, 0xA2, 0x16, 0x17, 0x28, 0x81,
                /* 0308 */  0xC7, 0x93, 0xD3, 0x7A, 0x08, 0x83, 0xCF, 0x3C,
                /* 0310 */  0x57, 0xCF, 0xDB, 0x87, 0x7A, 0x82, 0xFD, 0xF4,
                /* 0318 */  0x92, 0x8C, 0x80, 0xFB, 0x64, 0x8E, 0xA3, 0x3F,
                /* 0320 */  0x11, 0x79, 0x7E, 0x92, 0xD9, 0x75, 0xA9, 0x94,
                /* 0328 */  0x18, 0xBD, 0xC2, 0x19, 0x7C, 0x12, 0x00, 0x7E,
                /* 0330 */  0x0F, 0xE4, 0x9A, 0x25, 0x7D, 0x58, 0x6A, 0x93,
                /* 0338 */  0x53, 0xAC, 0xCC, 0xD4, 0x25, 0xB1, 0x3E, 0xA0,
                /* 0340 */  0xC7, 0x04, 0x1A, 0x32, 0x45, 0x6D, 0xC9, 0xFF,
                /* 0348 */  0x7B, 0xB4, 0xC0, 0x0B, 0x74, 0xA2, 0x9A, 0x61,
                /* 0350 */  0x51, 0xAF, 0x92, 0x3B, 0x89, 0x4D, 0x8C, 0xE1,
                /* 0358 */  0x45, 0x98, 0x0C, 0x0F, 0xDF, 0xD5, 0x4D, 0xBB,
                /* 0360 */  0x70, 0x59, 0x0C, 0xEC, 0x83, 0x8C, 0x43, 0x65,
                /* 0368 */  0xF6, 0x28, 0x8C, 0xD6, 0xC7, 0xA4, 0xF3       
            }
        })
        Name (DBD2, Package (0x01)
        {
            Buffer (0x036F)
            {
                /* 0000 */  0xE5, 0x1F, 0x94, 0x00, 0x00, 0x00, 0x00, 0x02,
                /* 0008 */  0x00, 0x00, 0x00, 0x40, 0x67, 0x64, 0x64, 0x76,
                /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                /* 0020 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                /* 0028 */  0x00, 0x00, 0x00, 0x00, 0x4F, 0x45, 0x4D, 0x20,
                /* 0030 */  0x45, 0x6D, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64,
                /* 0038 */  0x20, 0x44, 0x61, 0x74, 0x61, 0x56, 0x61, 0x75,
                /* 0040 */  0x6C, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                /* 0048 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                /* 0050 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                /* 0058 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                /* 0060 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                /* 0068 */  0x00, 0x00, 0x00, 0x00, 0xA6, 0x47, 0x93, 0x1F,
                /* 0070 */  0x94, 0x4A, 0xAD, 0x20, 0x9A, 0xA2, 0x75, 0x8A,
                /* 0078 */  0x27, 0x27, 0xCF, 0xEA, 0x0B, 0xD9, 0x59, 0x5D,
                /* 0080 */  0xF8, 0xEF, 0x55, 0xE8, 0xDB, 0x2A, 0xBF, 0x06,
                /* 0088 */  0xD4, 0x49, 0xCB, 0xAD, 0xDB, 0x02, 0x00, 0x00,
                /* 0090 */  0x52, 0x45, 0x50, 0x4F, 0x5D, 0x00, 0x00, 0x00,
                /* 0098 */  0x01, 0x51, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00,
                /* 00A0 */  0x00, 0x00, 0x72, 0x87, 0xCD, 0xFF, 0x6D, 0x24,
                /* 00A8 */  0x47, 0xDB, 0x3D, 0x24, 0x92, 0xB4, 0x16, 0x6F,
                /* 00B0 */  0x45, 0xD8, 0xC3, 0xF5, 0x66, 0x14, 0x9F, 0x22,
                /* 00B8 */  0xD7, 0xF7, 0xDE, 0x67, 0x90, 0x9A, 0xA2, 0x0D,
                /* 00C0 */  0x39, 0x25, 0xAD, 0xC3, 0x1A, 0xAD, 0x52, 0x0B,
                /* 00C8 */  0x75, 0x38, 0xE1, 0xA4, 0x14, 0x41, 0xD4, 0xEF,
                /* 00D0 */  0x72, 0x65, 0x47, 0xB3, 0x6E, 0xDE, 0xCF, 0xBD,
                /* 00D8 */  0xA8, 0x4C, 0x1A, 0xE8, 0xE9, 0x8B, 0xC7, 0xF2,
                /* 00E0 */  0xE7, 0xE5, 0x6B, 0x3A, 0x1C, 0x5D, 0x60, 0x19,
                /* 00E8 */  0x17, 0x87, 0x74, 0x36, 0x4B, 0xFD, 0x3C, 0x16,
                /* 00F0 */  0x5B, 0xDD, 0x77, 0x93, 0x37, 0x0D, 0xFF, 0x3F,
                /* 00F8 */  0x70, 0xE6, 0x20, 0xCC, 0x82, 0x64, 0xB8, 0xE5,
                /* 0100 */  0x8C, 0xB8, 0xB8, 0xD7, 0x2E, 0xAA, 0x7F, 0x48,
                /* 0108 */  0xC7, 0x13, 0x50, 0xAF, 0x5C, 0x98, 0xAF, 0xB6,
                /* 0110 */  0x99, 0x05, 0xA1, 0x2E, 0x43, 0xD5, 0x62, 0x0B,
                /* 0118 */  0x10, 0xAE, 0xED, 0x0F, 0x55, 0x77, 0x80, 0xFC,
                /* 0120 */  0x69, 0x0D, 0xE5, 0x7C, 0x3D, 0x93, 0x99, 0x1C,
                /* 0128 */  0x6E, 0x7E, 0x8A, 0x54, 0x6D, 0x00, 0xAD, 0x5E,
                /* 0130 */  0x60, 0x6E, 0xD0, 0xCC, 0xA3, 0x2A, 0xD3, 0xB8,
                /* 0138 */  0xC5, 0xD9, 0x56, 0x6F, 0x47, 0xCF, 0x9E, 0xA5,
                /* 0140 */  0xF8, 0x49, 0x5F, 0x97, 0x5D, 0xCA, 0xD6, 0xBE,
                /* 0148 */  0xE5, 0xF2, 0x42, 0x5C, 0x4C, 0x55, 0x57, 0x7B,
                /* 0150 */  0xEF, 0x6C, 0x93, 0xFE, 0xC2, 0x63, 0x71, 0xC9,
                /* 0158 */  0xC1, 0x10, 0x87, 0x67, 0xA2, 0x41, 0xD8, 0x15,
                /* 0160 */  0xA0, 0x60, 0x16, 0xCD, 0xF6, 0xF2, 0xE1, 0x87,
                /* 0168 */  0xFE, 0xB5, 0xD3, 0x33, 0xC1, 0x53, 0x3B, 0x6E,
                /* 0170 */  0xBC, 0x3C, 0xAF, 0x9F, 0x5F, 0x05, 0x0F, 0xF3,
                /* 0178 */  0x96, 0x81, 0x3F, 0xEF, 0xA4, 0x86, 0xBF, 0x0C,
                /* 0180 */  0x25, 0xAC, 0x39, 0xC5, 0x19, 0x23, 0xDB, 0x57,
                /* 0188 */  0x0C, 0xDA, 0x57, 0xE5, 0x1D, 0x8A, 0xA4, 0xEA,
                /* 0190 */  0xAA, 0x83, 0x15, 0x2B, 0xA2, 0x8E, 0xC1, 0x82,
                /* 0198 */  0xBE, 0x9A, 0xAE, 0xF2, 0x5F, 0x68, 0x79, 0xE8,
                /* 01A0 */  0xEC, 0xC7, 0x8F, 0x3F, 0x88, 0x7D, 0x65, 0x64,
                /* 01A8 */  0x17, 0x42, 0xAA, 0xDE, 0x2A, 0xF6, 0x13, 0x48,
                /* 01B0 */  0xD0, 0x9C, 0x61, 0x13, 0x5F, 0x90, 0x87, 0x48,
                /* 01B8 */  0xBD, 0xEC, 0x29, 0xB3, 0xF7, 0x54, 0x0A, 0xE6,
                /* 01C0 */  0x49, 0xBF, 0x5E, 0x0D, 0x7B, 0x14, 0x17, 0xBA,
                /* 01C8 */  0xED, 0x73, 0xE2, 0x38, 0x73, 0x6C, 0x3B, 0xF9,
                /* 01D0 */  0x6E, 0x1A, 0x3F, 0x5E, 0xC5, 0x39, 0x3A, 0x8E,
                /* 01D8 */  0x93, 0x6C, 0x6F, 0x03, 0x9E, 0xD0, 0x02, 0x68,
                /* 01E0 */  0x66, 0x71, 0x7B, 0x64, 0xFF, 0xC3, 0x4A, 0xF5,
                /* 01E8 */  0xE7, 0xD3, 0xC5, 0x3F, 0x2D, 0x8F, 0xAD, 0x5A,
                /* 01F0 */  0xCF, 0xD8, 0x76, 0xFF, 0xEB, 0x63, 0xE9, 0xE8,
                /* 01F8 */  0x9B, 0xBD, 0x81, 0x68, 0x5A, 0x07, 0x96, 0xE9,
                /* 0200 */  0xBA, 0x22, 0x34, 0xA1, 0x2F, 0xF6, 0x99, 0x4C,
                /* 0208 */  0x54, 0xD3, 0xE8, 0x80, 0xD9, 0x95, 0xE6, 0xCB,
                /* 0210 */  0x29, 0x63, 0xF3, 0x95, 0x39, 0xF5, 0x3A, 0x96,
                /* 0218 */  0xCF, 0xB3, 0x6D, 0xAF, 0x09, 0xD0, 0x49, 0x67,
                /* 0220 */  0x9E, 0x9E, 0xF7, 0xCE, 0xB8, 0x85, 0xA1, 0xFE,
                /* 0228 */  0xFD, 0xDE, 0xEE, 0xB5, 0x4E, 0x0B, 0x55, 0x60,
                /* 0230 */  0x9E, 0xF5, 0x8A, 0x93, 0x39, 0xAB, 0x41, 0x0F,
                /* 0238 */  0x55, 0xCC, 0x49, 0xF7, 0x43, 0x5F, 0x42, 0xB9,
                /* 0240 */  0x5C, 0x2F, 0xB4, 0x3D, 0xEB, 0x00, 0x20, 0x89,
                /* 0248 */  0x46, 0x60, 0x67, 0xBF, 0x2F, 0xDA, 0x42, 0xC5,
                /* 0250 */  0x14, 0xE2, 0xC7, 0xAC, 0xF9, 0xC5, 0xC4, 0xDF,
                /* 0258 */  0x9D, 0x0F, 0x61, 0xFB, 0xBF, 0x46, 0x67, 0xBD,
                /* 0260 */  0xC4, 0xB3, 0x99, 0x99, 0x3A, 0x24, 0xDA, 0xA1,
                /* 0268 */  0x0E, 0xD6, 0xCD, 0x1D, 0x55, 0xE6, 0x42, 0x39,
                /* 0270 */  0x3E, 0xB6, 0xB9, 0x8F, 0xE2, 0x4A, 0x31, 0xEB,
                /* 0278 */  0x24, 0xA1, 0xF1, 0x02, 0x18, 0x55, 0xD2, 0x05,
                /* 0280 */  0xBB, 0x96, 0xDB, 0x8A, 0x40, 0x74, 0xFF, 0xF1,
                /* 0288 */  0xAB, 0x19, 0xED, 0xA1, 0x6A, 0xC9, 0x8E, 0xF8,
                /* 0290 */  0xE2, 0x88, 0x61, 0x83, 0x11, 0xF0, 0xCE, 0x21,
                /* 0298 */  0x10, 0xB9, 0x4C, 0x97, 0x4E, 0x34, 0xD9, 0xA8,
                /* 02A0 */  0x30, 0x00, 0xB8, 0xCC, 0x66, 0x4A, 0x43, 0x57,
                /* 02A8 */  0x5E, 0xB5, 0xE0, 0x5C, 0x76, 0x1A, 0x84, 0xE5,
                /* 02B0 */  0xBF, 0x45, 0xA3, 0x0C, 0xE2, 0x38, 0x2B, 0x35,
                /* 02B8 */  0x58, 0x85, 0xB0, 0xD4, 0xF6, 0xED, 0xD9, 0x0E,
                /* 02C0 */  0x09, 0x6C, 0x47, 0xA4, 0x1B, 0x17, 0x17, 0x64,
                /* 02C8 */  0x5F, 0xB4, 0x54, 0xF7, 0x5F, 0xD1, 0x5B, 0xDF,
                /* 02D0 */  0x3A, 0x1C, 0xE1, 0x8F, 0xD2, 0x3E, 0xD4, 0x48,
                /* 02D8 */  0xA0, 0xCA, 0x9E, 0xFC, 0x04, 0xE4, 0x31, 0x9D,
                /* 02E0 */  0xBD, 0x0D, 0x12, 0x17, 0xE2, 0x81, 0x40, 0x3F,
                /* 02E8 */  0x51, 0x01, 0x03, 0x64, 0x47, 0xA4, 0x56, 0x2B,
                /* 02F0 */  0x84, 0xB6, 0xC3, 0x37, 0x2A, 0xF5, 0x74, 0x53,
                /* 02F8 */  0x78, 0x88, 0xEA, 0xF3, 0x70, 0xC8, 0x68, 0xCA,
                /* 0300 */  0x09, 0x66, 0x07, 0xA2, 0x16, 0x17, 0x28, 0x81,
                /* 0308 */  0xC7, 0x93, 0xD3, 0x7A, 0x08, 0x83, 0xCF, 0x3C,
                /* 0310 */  0x57, 0xCF, 0xDB, 0x87, 0x7A, 0x82, 0xFD, 0xF4,
                /* 0318 */  0x92, 0x8C, 0x80, 0xFB, 0x64, 0x8E, 0xA3, 0x3F,
                /* 0320 */  0x11, 0x79, 0x7E, 0x92, 0xD9, 0x75, 0xA9, 0x94,
                /* 0328 */  0x18, 0xBD, 0xC2, 0x19, 0x7C, 0x12, 0x00, 0x7E,
                /* 0330 */  0x0F, 0xE4, 0x9A, 0x25, 0x7D, 0x58, 0x6A, 0x93,
                /* 0338 */  0x53, 0xAC, 0xCC, 0xD4, 0x25, 0xB1, 0x3E, 0xA0,
                /* 0340 */  0xC7, 0x04, 0x1A, 0x32, 0x45, 0x6D, 0xC9, 0xFF,
                /* 0348 */  0x7B, 0xB4, 0xC0, 0x0B, 0x74, 0xA2, 0x9A, 0x61,
                /* 0350 */  0x51, 0xAF, 0x92, 0x3B, 0x89, 0x4D, 0x8C, 0xE1,
                /* 0358 */  0x45, 0x98, 0x0C, 0x0F, 0xDF, 0xD5, 0x4D, 0xBB,
                /* 0360 */  0x70, 0x59, 0x0C, 0xEC, 0x83, 0x8C, 0x43, 0x65,
                /* 0368 */  0xF6, 0x28, 0x8C, 0xD6, 0xC7, 0xA4, 0xF3       
            }
        })
        Name (DBD3, Package (0x01)
        {
            Buffer (0x036F)
            {
                /* 0000 */  0xE5, 0x1F, 0x94, 0x00, 0x00, 0x00, 0x00, 0x02,
                /* 0008 */  0x00, 0x00, 0x00, 0x40, 0x67, 0x64, 0x64, 0x76,
                /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                /* 0020 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                /* 0028 */  0x00, 0x00, 0x00, 0x00, 0x4F, 0x45, 0x4D, 0x20,
                /* 0030 */  0x45, 0x6D, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64,
                /* 0038 */  0x20, 0x44, 0x61, 0x74, 0x61, 0x56, 0x61, 0x75,
                /* 0040 */  0x6C, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                /* 0048 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                /* 0050 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                /* 0058 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                /* 0060 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                /* 0068 */  0x00, 0x00, 0x00, 0x00, 0x5E, 0xA8, 0x74, 0x58,
                /* 0070 */  0xBA, 0xA0, 0x71, 0x55, 0xC1, 0x48, 0xB2, 0x7A,
                /* 0078 */  0xC4, 0x4B, 0xAE, 0x70, 0x6E, 0xC2, 0x3E, 0xE9,
                /* 0080 */  0xB3, 0x98, 0xC3, 0xD5, 0x71, 0xC4, 0x7B, 0xB0,
                /* 0088 */  0x20, 0xBF, 0x55, 0x5D, 0xDB, 0x02, 0x00, 0x00,
                /* 0090 */  0x52, 0x45, 0x50, 0x4F, 0x5D, 0x00, 0x00, 0x00,
                /* 0098 */  0x01, 0x51, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00,
                /* 00A0 */  0x00, 0x00, 0x72, 0x87, 0xCD, 0xFF, 0x6D, 0x24,
                /* 00A8 */  0x47, 0xDB, 0x3D, 0x24, 0x92, 0xB4, 0x16, 0x6F,
                /* 00B0 */  0x45, 0xD8, 0xC3, 0xF5, 0x66, 0x14, 0x9F, 0x22,
                /* 00B8 */  0xD7, 0xF7, 0xDE, 0x67, 0x90, 0x9A, 0xA2, 0x0D,
                /* 00C0 */  0x39, 0x25, 0xAD, 0xC3, 0x1A, 0xAD, 0x52, 0x0B,
                /* 00C8 */  0x75, 0x38, 0xE1, 0xA4, 0x14, 0x41, 0x5B, 0x5B,
                /* 00D0 */  0x7F, 0x45, 0xFF, 0x48, 0xAA, 0x76, 0xFC, 0xEE,
                /* 00D8 */  0x83, 0x6D, 0x33, 0xFE, 0x43, 0x0F, 0x8D, 0x77,
                /* 00E0 */  0xAD, 0x61, 0xA0, 0x9D, 0x5B, 0x24, 0x32, 0x4C,
                /* 00E8 */  0xC0, 0xDF, 0x86, 0x12, 0x3D, 0xF2, 0x24, 0x06,
                /* 00F0 */  0x28, 0x9D, 0x8F, 0xE2, 0xCF, 0x40, 0x57, 0x27,
                /* 00F8 */  0xD0, 0x01, 0xA0, 0x63, 0xCE, 0x4B, 0xAE, 0x0A,
                /* 0100 */  0x3B, 0x7E, 0x22, 0x1C, 0x65, 0x90, 0x97, 0xDB,
                /* 0108 */  0xB1, 0x6B, 0xC4, 0x11, 0xFF, 0xAB, 0x63, 0x9F,
                /* 0110 */  0xC1, 0x12, 0x4B, 0x30, 0xBA, 0x49, 0x0D, 0x9C,
                /* 0118 */  0x6C, 0x43, 0xAA, 0x74, 0x30, 0xA5, 0x83, 0x9E,
                /* 0120 */  0xB8, 0x5B, 0x8D, 0x20, 0xC6, 0x3F, 0xD7, 0xC2,
                /* 0128 */  0x40, 0x1C, 0xB8, 0x38, 0xCD, 0xD7, 0x50, 0xFB,
                /* 0130 */  0x65, 0xB4, 0x57, 0xC1, 0x57, 0x1C, 0x4F, 0xED,
                /* 0138 */  0x28, 0x0D, 0x96, 0xED, 0xA6, 0x3B, 0x3A, 0x0F,
                /* 0140 */  0xDD, 0xB9, 0x74, 0x80, 0x60, 0x62, 0x2B, 0x71,
                /* 0148 */  0xF4, 0xCC, 0xF8, 0xBE, 0xD0, 0xE8, 0xD8, 0xB1,
                /* 0150 */  0x2A, 0x69, 0x0C, 0x3E, 0xF6, 0xF9, 0x6E, 0x37,
                /* 0158 */  0x85, 0x2E, 0x0C, 0xFD, 0x2A, 0xB3, 0x5C, 0xB1,
                /* 0160 */  0xC0, 0xE7, 0x04, 0xBF, 0x5C, 0xD0, 0xC3, 0x19,
                /* 0168 */  0x5C, 0x43, 0x5E, 0xC0, 0x46, 0x1D, 0x52, 0x97,
                /* 0170 */  0x0A, 0x97, 0x65, 0xAB, 0xF2, 0x43, 0x86, 0x16,
                /* 0178 */  0x47, 0x17, 0x41, 0x72, 0xDD, 0xEF, 0x5F, 0x96,
                /* 0180 */  0xF5, 0x31, 0x22, 0xD4, 0x2C, 0x4C, 0x30, 0x50,
                /* 0188 */  0xB6, 0x75, 0x85, 0xC6, 0xBA, 0xEC, 0x5E, 0x45,
                /* 0190 */  0x6C, 0x24, 0x10, 0x3C, 0x30, 0x15, 0x98, 0x2B,
                /* 0198 */  0x53, 0x9D, 0xC2, 0x65, 0x35, 0x58, 0xFA, 0x9C,
                /* 01A0 */  0xC8, 0xF4, 0xF4, 0x0C, 0x27, 0x61, 0xB0, 0x44,
                /* 01A8 */  0x8E, 0x7D, 0x86, 0x25, 0x18, 0xFB, 0xA9, 0x23,
                /* 01B0 */  0x56, 0x77, 0x70, 0xB2, 0xD8, 0xDC, 0xDC, 0xCD,
                /* 01B8 */  0x24, 0xE1, 0x8A, 0x4D, 0x62, 0x62, 0xBA, 0xD9,
                /* 01C0 */  0xF1, 0xA3, 0x9F, 0x7E, 0xD9, 0x3D, 0x45, 0x58,
                /* 01C8 */  0xB5, 0xCA, 0xEB, 0x0E, 0xAD, 0xAF, 0xA9, 0x34,
                /* 01D0 */  0x3A, 0x43, 0x09, 0xD3, 0xDB, 0xD7, 0xCF, 0x0F,
                /* 01D8 */  0x7A, 0x0C, 0x58, 0x1A, 0xA1, 0x66, 0xED, 0xF7,
                /* 01E0 */  0x4F, 0x6F, 0xE6, 0x18, 0xAE, 0x79, 0xA5, 0xDD,
                /* 01E8 */  0x63, 0x48, 0x3A, 0x7B, 0x40, 0x5B, 0xCD, 0x8E,
                /* 01F0 */  0xFA, 0x20, 0xB2, 0x5E, 0x1E, 0xAF, 0xDA, 0x7C,
                /* 01F8 */  0x4F, 0x50, 0x57, 0x9F, 0x2E, 0xC0, 0xE5, 0x69,
                /* 0200 */  0xAC, 0xC4, 0xA3, 0x13, 0x27, 0x11, 0xE1, 0x3D,
                /* 0208 */  0x0D, 0x2E, 0x56, 0x41, 0x70, 0xD4, 0xBF, 0xC5,
                /* 0210 */  0xD8, 0xC3, 0xA8, 0x0A, 0x45, 0x76, 0x61, 0xA2,
                /* 0218 */  0x13, 0x74, 0x2F, 0x10, 0xDD, 0x30, 0xF1, 0xA0,
                /* 0220 */  0xC9, 0xCB, 0x21, 0x9B, 0x0C, 0x71, 0x6E, 0x4E,
                /* 0228 */  0xCF, 0xAA, 0xFC, 0x61, 0x29, 0xB2, 0x38, 0xFD,
                /* 0230 */  0x73, 0x33, 0xE6, 0x3F, 0xBD, 0x6E, 0x5A, 0x23,
                /* 0238 */  0xA6, 0xBA, 0xD6, 0xAF, 0xFE, 0x08, 0x7C, 0xF1,
                /* 0240 */  0x0F, 0xD4, 0x04, 0x3D, 0xF2, 0x7D, 0x6C, 0x3B,
                /* 0248 */  0x72, 0xEE, 0xCB, 0x2F, 0x92, 0x96, 0x83, 0x97,
                /* 0250 */  0x85, 0x5A, 0x9D, 0xDD, 0xC8, 0xFC, 0xDB, 0xE1,
                /* 0258 */  0x84, 0xDA, 0x96, 0xA0, 0xC5, 0xC4, 0x50, 0x17,
                /* 0260 */  0x79, 0xA4, 0x5F, 0x69, 0xCE, 0xBC, 0xB3, 0x12,
                /* 0268 */  0x38, 0x75, 0xAB, 0x06, 0xCF, 0x98, 0x9B, 0xA6,
                /* 0270 */  0x40, 0x9F, 0x46, 0x93, 0x22, 0x7B, 0x0F, 0xCA,
                /* 0278 */  0x59, 0xEB, 0x66, 0xDE, 0x80, 0xD4, 0x49, 0x94,
                /* 0280 */  0xBE, 0xC5, 0xEF, 0xE8, 0x18, 0x21, 0x6D, 0x44,
                /* 0288 */  0x81, 0x62, 0x13, 0x6A, 0x25, 0xA4, 0x6F, 0x63,
                /* 0290 */  0xB5, 0xD6, 0x45, 0x78, 0x4B, 0xFE, 0x06, 0x04,
                /* 0298 */  0x24, 0xB3, 0x9B, 0x44, 0x8A, 0x48, 0xAB, 0xE2,
                /* 02A0 */  0x41, 0xD8, 0x7B, 0x0E, 0xB2, 0x6B, 0xC2, 0x1D,
                /* 02A8 */  0x04, 0xD8, 0x09, 0x65, 0x7B, 0x19, 0x73, 0x11,
                /* 02B0 */  0x8B, 0xE7, 0x74, 0x2B, 0xD5, 0x7E, 0x2A, 0x15,
                /* 02B8 */  0x21, 0xD5, 0x58, 0xAF, 0xBA, 0xEE, 0x13, 0x42,
                /* 02C0 */  0x0E, 0x35, 0xA0, 0x02, 0xA7, 0x8A, 0xA9, 0x5F,
                /* 02C8 */  0x82, 0x7E, 0x3C, 0x0E, 0x0C, 0x6A, 0x41, 0xB5,
                /* 02D0 */  0xB0, 0xB2, 0x5C, 0xD7, 0x08, 0xBB, 0xFB, 0xD6,
                /* 02D8 */  0x65, 0xB1, 0xF2, 0x39, 0xA7, 0x49, 0x3F, 0x1F,
                /* 02E0 */  0xB1, 0xA1, 0x42, 0x21, 0xB1, 0xC2, 0x9D, 0xA1,
                /* 02E8 */  0xFE, 0xEA, 0xF9, 0xA5, 0xAC, 0x42, 0xBD, 0xB7,
                /* 02F0 */  0x73, 0x05, 0xE9, 0x75, 0xD7, 0xC6, 0x09, 0x94,
                /* 02F8 */  0x92, 0x9E, 0xFD, 0x49, 0xAB, 0xA1, 0xFC, 0x6D,
                /* 0300 */  0xAF, 0x86, 0xE2, 0x4A, 0x7E, 0xCB, 0xBD, 0x95,
                /* 0308 */  0x2C, 0x13, 0xE8, 0xBB, 0xEF, 0x5F, 0xE9, 0x3E,
                /* 0310 */  0x1E, 0xE7, 0x8C, 0x26, 0xB4, 0xD2, 0x07, 0x53,
                /* 0318 */  0x03, 0x61, 0x8A, 0x8D, 0x81, 0x45, 0x93, 0x28,
                /* 0320 */  0xF0, 0x8E, 0x41, 0xDC, 0xEE, 0x45, 0xC7, 0x13,
                /* 0328 */  0x83, 0xC6, 0xF2, 0x1C, 0xEB, 0xD4, 0x2C, 0xC9,
                /* 0330 */  0x8D, 0x35, 0x0B, 0xDB, 0xAA, 0x09, 0x4A, 0x3D,
                /* 0338 */  0xE0, 0xC4, 0x1A, 0xEA, 0x0C, 0x0F, 0xCE, 0xBB,
                /* 0340 */  0xDF, 0x55, 0x0B, 0xFF, 0xCD, 0xEE, 0xA3, 0x09,
                /* 0348 */  0x00, 0x3F, 0x44, 0xC3, 0x40, 0x11, 0x55, 0xE0,
                /* 0350 */  0x45, 0x49, 0x2A, 0xE7, 0x21, 0xFF, 0xDC, 0x83,
                /* 0358 */  0xDC, 0x24, 0x39, 0xE7, 0x1C, 0xAF, 0x93, 0x7D,
                /* 0360 */  0xF3, 0xF8, 0xAA, 0x19, 0x2C, 0x5F, 0x6A, 0xA7,
                /* 0368 */  0xCA, 0xEB, 0x4F, 0x22, 0x35, 0xE0, 0xB2       
            }
        })
        Method (GBDV, 0, Serialized)
        {
            If (LEqual (\_SB.GGIV (0x04030013), One))
            {
                If (LEqual (\_SB.GGIV (0x04030014), One))
                {
                    Return (DBD3)
                }
                Else
                {
                    Return (DBD1)
                }
            }
            Else
            {
                Return (DBD2)
            }
        }
    }
}

